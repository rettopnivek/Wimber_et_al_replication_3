}
tmp = QR_constructor(3,.6)
Q = tmp$Q; R = tmp$R
tmp = QR_constructor(3,.6)
Q = tmp$Q; R = tmp$R
Z = rbind( numeric(dim(Q)[1]) ); Z[3] = 1;
rm(tmp)
P_NS(Q,R,Z)
ET_NS = function(Q,R,Z) {
I = diag(dim(Q)[1])
prob = P_NS(Q,R,Z)
A = solve( I - Q )
B = Z %*% (A %*% A) %*% R
B/prob
}
P_NS(Q,R,Z)
ET_NS(Q,R,Z)
Rcpp::sourceCpp('J:/Stuff/Kevin\'s Stuff/Postdoc/Diederich_Busemeyer_Matrix_methods/Test_functions.cpp')
Rcpp::sourceCpp('J:/Stuff/Kevin\'s Stuff/Postdoc/Diederich_Busemeyer_Matrix_methods/Test_functions.cpp')
tst=simpleRandomWalk(3,.6)
Rcpp::sourceCpp('J:/Stuff/Kevin\'s Stuff/Postdoc/Diederich_Busemeyer_Matrix_methods/Test_functions.cpp')
tst=QR_constructor(3,.6)
Rcpp::sourceCpp('J:/Stuff/Kevin\'s Stuff/Postdoc/Diederich_Busemeyer_Matrix_methods/Test_functions.cpp')
Rcpp::sourceCpp('J:/Stuff/Kevin\'s Stuff/Postdoc/Diederich_Busemeyer_Matrix_methods/Test_functions.cpp')
Rcpp::sourceCpp('J:/Stuff/Kevin\'s Stuff/Postdoc/Diederich_Busemeyer_Matrix_methods/Test_functions.cpp')
tst=QR_constructor(3,.6)
Rcpp::sourceCpp('J:/Stuff/Kevin\'s Stuff/Postdoc/Diederich_Busemeyer_Matrix_methods/Test_functions.cpp')
tst=QR_constructor(3,.6)
Rcpp::sourceCpp('J:/Stuff/Kevin\'s Stuff/Postdoc/Diederich_Busemeyer_Matrix_methods/Test_functions.cpp')
tst=QR_constructor(3,.6)
tst$Q
m
m-2
4+4
Rcpp::sourceCpp('J:/Stuff/Kevin\'s Stuff/Postdoc/Diederich_Busemeyer_Matrix_methods/Test_functions.cpp')
tst=QR_constructor(3,.6)
tst$Q
Rcpp::sourceCpp('J:/Stuff/Kevin\'s Stuff/Postdoc/Diederich_Busemeyer_Matrix_methods/Test_functions.cpp')
tst$Q
Rcpp::sourceCpp('J:/Stuff/Kevin\'s Stuff/Postdoc/Diederich_Busemeyer_Matrix_methods/Test_functions.cpp')
tst$Q
tst=QR_constructor(3,.6)
tst$Q
Rcpp::sourceCpp('J:/Stuff/Kevin\'s Stuff/Postdoc/Diederich_Busemeyer_Matrix_methods/Test_functions.cpp')
tst$Q
tst$R
Rcpp::sourceCpp('J:/Stuff/Kevin\'s Stuff/Postdoc/Diederich_Busemeyer_Matrix_methods/Test_functions.cpp')
tst=QR_constructor(3,.6)
tst$R
tst$Q
tmp=QR_constructor(10,.6)
tmp=QR_constructor(100,.6)
Q = tmp$Q; R = tmp$R
Z = rbind( c( rep(0,100), 1, rep(0,100) ) )
P_NS(Q,R,Z)
dim(Q)
theta=100
tmp=QR_constructor(theta,.6)
Q = tmp$Q; R = tmp$R
str(R)
str(Q)
2*theta + 1
201-2-1
201-2
Z = rbind( c( rep(0,99), 1, rep(0,99) ) )
P_NS(Q,R,Z)
ET_NS(Q,R,Z)
tmp=QR_constructor(theta,.501)
P_NS(Q,R,Z)
ET_NS(Q,R,Z)
tmp=QR_constructor(theta,.5)
Q = tmp$Q; R = tmp$R
P_NS(Q,R,Z)
tmp=QR_constructor(theta,.501)
Q = tmp$Q; R = tmp$R
P_NS(Q,R,Z)
tmp=QR_constructor(theta,.505)
Q = tmp$Q; R = tmp$R
P_NS(Q,R,Z)
ET_NS(Q,R,Z)
tmp=QR_constructor(20,.501)
theta=20
Z = cbind( c( rep(0,theta-1), 1, rep(0,theta-1) ) )
tmp=QR_constructor(theta,.5)
ET_NS(Q,R,Z)
Q = tmp$Q; R = tmp$R
ET_NS(Q,R,Z)
R
str(Q)
Q[2,]
Q[1,]
str(Z)
Z = rbind( c( rep(0,theta-1), 1, rep(0,theta-1) ) )
ET_NS(Q,R,Z)
P_NS(Q,R,Z)
tmp=QR_constructor(theta,.55)
Q = tmp$Q; R = tmp$R
Z = rbind( c( rep(0,theta-1), 1, rep(0,theta-1) ) )
P_NS(Q,R,Z)
tmp=QR_constructor(theta,.505)
Q = tmp$Q; R = tmp$R
Z = rbind( c( rep(0,theta-1), 1, rep(0,theta-1) ) )
P_NS(Q,R,Z)
ET_NS(Q,R,Z)
setwd("J:/Stuff/Kevin's Stuff/Postdoc/Wimber_et_al_2015_rep2/Analyses")
source('J:/Stuff/Kevin\'s Stuff/Postdoc/Wimber_et_al_2015_rep2/Analyses/F5_Setup.R', echo=TRUE)
setwd("J:/Stuff/Kevin's Stuff/Postdoc/Wimber_et_al_2015_rep2/Analyses")
source('J:/Stuff/Kevin\'s Stuff/Postdoc/Wimber_et_al_2015_rep2/Analyses/F5_Setup.R', echo=TRUE)
?write.table
write.table(new.dat,file='Replication_study_2.csv',sep=',',quote=F,row.names=F,col.names=T)
nrow(new.dat)
head(new.dat)
ls()
strTime.out.check
str(Time.out.check)
aggregate(new.dat$Accuracy,list(new.dat$Cond),mean)
aggregate(new.dat$Accuracy,list(new.dat$Cond,new.dat$Subject),mean)
Overall = aggregate(new.dat$Accuracy,
list(new.dat$Cond,new.dat$Subject),mean)
colnames(Overall) = c('Cond','S','P')
Overall = Overall[Overall$Cond!=1,]
Overall
x11();
plot( c(.5,4.5), c(0,1), type='n', xlab='Condition',
ylab='Accuracy' )
plot( c(.5,4.5), c(0,1), type='n', xlab='Condition',
ylab='Accuracy', xaxt='n' )
plot( c(.5,4.5), c(0,1), type='n', xlab='Condition',
ylab='Accuracy', xaxt='n' )
la = 1.2
lW = c( la,la, 1,1, la,la, 1,1, la,la,la, 1,1 )
for (i in 1:4) {
my_boxplot( Overall$P[Overall$Cond==(i+1)], pos=i, wdth=.2,
adj=.6, sem=T, lwd = lW, mlt = 2 )
}
plot( c(.5,5.5), c(0,1), type='n', xlab='Condition',
ylab='Accuracy', xaxt='n' )
la = 1.2
lW = c( la,la, 1,1, la,la, 1,1, la,la,la, 1,1 )
for (i in 1:5) {
my_boxplot( Overall$P[Overall$Cond==(i+1)], pos=i, wdth=.2,
adj=.6, sem=T, lwd = lW, mlt = 2 )
}
axis(1,1:5,c('Target training 1','Target training 2',
'Competitor training','Selective retrieval',
'Final recognition',cex.axis=.7))
axis(1,1:5,c('Target training 1','Target training 2',
'Competitor training','Selective retrieval',
'Final recognition'),cex.axis=.7)
bp_label(1,.1,.1,.3)
bp_label = function(x,y,w,h) {
# Purpose:
# A function to create a label for the boxplot
# Arguments:
# x
# y
# w
# h
# Returns:
# Forthcoming
ya = c( 0, h*.25, h*.33, h*.5, h*.66, h*.75, h )
segments( x + c(0,-w,-w,-w,-w,w,w,-w/2,w/2,w,-w/2,-w,0),
y+c(ya[1],ya[2],ya[2],ya[3],ya[6],ya[2],ya[3],ya[4],
ya[4],ya[5],ya[4],ya[5],ya[6]),
x + c(0,w,-w,-w/2,w,w,w/2,w/2,w,w,-w,-w,0),
y+c(ya[2],ya[2],ya[3],ya[4],ya[6],ya[3],ya[4],ya[4],
ya[5],ya[6],ya[5],ya[6],ya[7]) )
text( x, y, 'Min',pos=1)
text( x, y+ya[7], 'Max',pos=3)
text( x+w, y+ya[2], '25% quartile',pos=4)
text( x+w, y+ya[6], '75% quartile',pos=4)
text( x+w, y+ya[4], 'Mean +/- 2 SEs',pos=4)
}
bp_label(1,.1,.1,.3)
setwd("J:/Stuff/Kevin's Stuff/Postdoc/Wimber_et_al_2015_rep2/Analyses")
source('J:/Stuff/Kevin\'s Stuff/Postdoc/Wimber_et_al_2015_rep2/Analyses/F5_Setup.R', echo=TRUE)
source('J:/Stuff/Kevin\'s Stuff/Postdoc/Wimber_et_al_2015_rep2/Analyses/F4_Descriptive_plots.R', echo=TRUE)
setwd("J:/Stuff/Kevin's Stuff/Postdoc/Wimber_et_al_2015_rep2/Dave_RIFData/Dave_RIFData/Sub1")
dir()
tst = read.table(dir()[12],skip=5,header=F)
?scan
tst = scan(file='VP1_fMRI-PictureDiscrimination_fMRI.log',
what='character')
tst = scan(file='VP1_fMRI-PictureDiscrimination_fMRI.log',
what='character',sep='\n')
tst[1]
tst[6]
tst[8]
tst[9]
tst[10]
tst[11]
tst[13]
head(new.dat)
dir()
setwd("J:/Stuff/Kevin's Stuff/Postdoc/Wimber_et_al_2015_rep2")
orig_dir = getwd()
# Change working directory to where
# the subject folders are located
DataFolder = 'Dave_RIFData'
setwd(DataFolder);
setwd(DataFolder);
s = 1
# Change working directory to current subject's data location
setwd( paste('Sub',s,sep='') )
SN = paste('VP',s,sep='') # Subject number
# First, data for the familiarization phase
fName = paste(SN,'_fMRI-Familiarization.log_fMRI-Familiarization.log',
sep='')
fName
tst = scan(file=fName,what='character',sep='\n')
dir()
fName
fName = paste(SN,'_fMRI-Familiarization.log',sep='')
tst = scan(file=fName,what='character',sep='\n')
tst[1]
tst[2]
tst[3]
tst[4]
strsplit(tst[1],split='\t')
strsplit(tst[1],split='\t')[[1]]
strsplit(tst[2],split='\t')[[1]]
strsplit(tst[3],split='\t')[[1]]
strsplit(tst[4],split='\t')[[1]]
strsplit(tst[4],split='\t')[[1]]
ln = 4
tmp = strsplit(tst[ln],split='\t')[[1]]
tmp[1] == paste(SN,'fMRI',sep='_')
tmp[3] != 'famInstr'
tmp[3] == 'Picture'
tmp[4] != 'famInstr'
tmp = strsplit(tst[ln],split='\t')[[1]]
tmp[1] == paste(SN,'fMRI',sep='_')
tmp[3] == 'Picture'
tmp[4] != 'famInstr'
tmp
ln = 6
tmp = strsplit(tst[ln],split='\t')[[1]]
tmp[1] == paste(SN,'fMRI',sep='_')
tmp[3] == 'Picture'
tmp[4] != 'famInstr'
tmp
ln = 6
tmp = strsplit(tst[ln],split='\t')[[1]]
tmp[1] == paste(SN,'fMRI',sep='_')
tmp[3] == 'Picture'
tmp[4] != 'famInstr'  | 'fix'
tmp[4] != 'famInstr'  & tmp[4] != 'fix'
ln = 6
tmp = strsplit(tst[ln],split='\t')[[1]]
tmp[1] == paste(SN,'fMRI',sep='_')
tmp[3] == 'Picture'
tmp[4] != 'famInstr'  & tmp[4] != 'fix'
ln = 7
tmp = strsplit(tst[ln],split='\t')[[1]]
tmp[1] == paste(SN,'fMRI',sep='_')
tmp[3] == 'Picture'
tmp[4] != 'famInstr'  & tmp[4] != 'fix'
tmp
setwd("J:/Stuff/Kevin's Stuff/Postdoc/Wimber_et_al_2015_rep2/Analyses")
orig_dir = getwd()
setwd('..')
KevLabels = scan(file='Labels.txt',what='character')
KevLabels[1]
KevLabels = scan(file='Labels.txt',what='character',sep='\n')
KevLabels
DataFolder = 'Dave_RIFData'
setwd(DataFolder);
setwd(DataFolder);
s = 1
# Change working directory to current subject's data location
setwd( paste('Sub',s,sep='') )
KevLabels
OrigLabels = scan(file='picsAll_X.txt',what='character',sep='\n')
OrigLabels
OrigLabels = OrigLabels[-1]
ln = 1
strsplit(OrigLabels[ln],split='\t')
strsplit(OrigLabels[ln],split='\t')[[1]]
strsplit(OrigLabels[ln],split='"\')[[1]]
")
)
'_
strsplit(OrigLabels[ln],split='"')[[1]]
strsplit(tmp[2],split='A')[[1]]
tmp = strsplit(OrigLabels[ln],split='"')[[1]]
strsplit(tmp[2],split='A')[[1]]
tmp2 = strsplit(tmp[4],split='1.bmp')[[1]]
tmp2
id = 1
paste(KevLabels[id],collapse='')
strsplit(KevLabels[id],split=' ')[[1]]
paste(strsplit(KevLabels[id],split=' ')[[1]],collapse='')
id = NA
for (i in 1:length(KevLabels)) {
cmp = paste(strsplit(KevLabels[i],split=' ')[[1]],collapse='')
if (tmp2==cmp) id = i
}
id
?data.frame
PicID = data.frame( A = rep('Empty',length(OrigLabels)),
B = rep('Empty',length(OrigLabels)),
ID = rep(0,length(OrigLabels)) )
OrigLabels = scan(file='picsAll_X.txt',what='character',sep='\n')
OrigLabels = OrigLabels[-1]
PicID = data.frame( A = rep('Empty',length(OrigLabels)),
B = rep('Empty',length(OrigLabels)),
ID = rep(0,length(OrigLabels)) )
for (ln in 1:length(OrigLabels)) {
# ln = 1
tmp = strsplit(OrigLabels[ln],split='"')[[1]]
tmp1 = strsplit(tmp[2],split='A')[[1]]
tmp2 = strsplit(tmp[4],split='1.bmp')[[1]]
id = NA
for (i in 1:length(KevLabels)) {
cmp = paste(strsplit(KevLabels[i],split=' ')[[1]],collapse='')
if (tmp2==cmp) id = i
}
PicID[ln,1] = paste(tmp1,'A',sep='')
PicID[ln,2] = paste(tmp1,'B',sep='')
PicID[ln,3] = id
}
rm(ln,tmp,tmp1,tmp2,id,cmp,i)
warnings()
PicID
PicID = data.frame( A = rep('Empty',length(OrigLabels)),
B = rep('Empty',length(OrigLabels)),
ID = rep(0,length(OrigLabels)) )
PicID
OrigLabels = scan(file='picsAll_X.txt',what='character',sep='\n')
OrigLabels = OrigLabels[-1]
PicID = matrix( 'Empty', length(OrigLabels), 2 )
tmpID = numeric( length(OrigLabels) )
for (ln in 1:length(OrigLabels)) {
# ln = 1
tmp = strsplit(OrigLabels[ln],split='"')[[1]]
tmp1 = strsplit(tmp[2],split='A')[[1]]
tmp2 = strsplit(tmp[4],split='1.bmp')[[1]]
id = NA
for (i in 1:length(KevLabels)) {
cmp = paste(strsplit(KevLabels[i],split=' ')[[1]],collapse='')
if (tmp2==cmp) id = i
}
PicID[ln,1] = paste(tmp1,'A',sep='')
PicID[ln,2] = paste(tmp1,'B',sep='')
tmpID[ln] = id
}
PicID[3,]
tmpID[3]
OrigLabels[3,]
OrigLabels[3]
KevLabels
tmpID
which(is.na(tmpID))
OrigLabels[10]
OrigLabels[21]
OrigLabels[27]
OrigLabels[32]
OrigLabels[41]
NovelLabels = c()
NovelID = c()
OrigLabels = scan(file='picsAll_X.txt',what='character',sep='\n')
OrigLabels = OrigLabels[-1]
PicID = matrix( 'Empty', length(OrigLabels), 2 )
tmpID = numeric( length(OrigLabels) )
for (ln in 1:length(OrigLabels)) {
# ln = 1
tmp = strsplit(OrigLabels[ln],split='"')[[1]]
tmp1 = strsplit(tmp[2],split='A')[[1]]
tmp2 = strsplit(tmp[4],split='1.bmp')[[1]]
id = NA
for (i in 1:length(KevLabels)) {
cmp = paste(strsplit(KevLabels[i],split=' ')[[1]],collapse='')
if (tmp2==cmp) id = i
}
if ( is.na(id) ) {
if ( length( NovelLabels ) > 0 ) {
for (i in 1:length(NovelLabels)) {
cmp = NovelLabels[i]
if (tmp2==cmp) id = NovelID[i]
}
if (is.na(id)) {
NovelLabels = c( NovelLabels, tmp2 )
NovelID = c( NovelID, NovelID[ length(NovelID) ] + 1 )
}
id = NovelID[ length(NovelID) ]
} else {
NovelLabels = c( NovelLabels, tmp2 );
NovelID = c( NovelID, length( OrigLabels ) + 1 )
}
}
PicID[ln,1] = paste(tmp1,'A',sep='')
PicID[ln,2] = paste(tmp1,'B',sep='')
tmpID[ln] = id
}
NovelID
NovelLabels
PicID
tmpID
OrigLabels = scan(file='picsAll_X.txt',what='character',sep='\n')
OrigLabels = OrigLabels[-1]
PicID = matrix( 'Empty', length(OrigLabels), 2 )
tmpID = numeric( length(OrigLabels) )
for (ln in 1:length(OrigLabels)) {
# ln = 1
tmp = strsplit(OrigLabels[ln],split='"')[[1]]
tmp1 = strsplit(tmp[2],split='A')[[1]]
tmp2 = strsplit(tmp[4],split='1.bmp')[[1]]
id = NA
for (i in 1:length(KevLabels)) {
cmp = paste(strsplit(KevLabels[i],split=' ')[[1]],collapse='')
if (tmp2==cmp) id = i
}
if ( is.na(id) ) {
if ( length( NovelLabels ) > 0 ) {
for (i in 1:length(NovelLabels)) {
cmp = NovelLabels[i]
if (tmp2==cmp) id = NovelID[i]
}
if (is.na(id)) {
NovelLabels = c( NovelLabels, tmp2 )
NovelID = c( NovelID, NovelID[ length(NovelID) ] + 1 )
}
id = NovelID[ length(NovelID) ]
} else {
NovelLabels = c( NovelLabels, tmp2 );
NovelID = c( NovelID, length( OrigLabels ) + 1 )
id = NovelID[1]
}
}
PicID[ln,1] = paste(tmp1,'A',sep='')
PicID[ln,2] = paste(tmp1,'B',sep='')
tmpID[ln] = id
}
tmpID
NovelLabels = c()
NovelID = c()
OrigLabels = scan(file='picsAll_X.txt',what='character',sep='\n')
OrigLabels = OrigLabels[-1]
PicID = matrix( 'Empty', length(OrigLabels), 2 )
tmpID = numeric( length(OrigLabels) )
for (ln in 1:length(OrigLabels)) {
# ln = 1
tmp = strsplit(OrigLabels[ln],split='"')[[1]]
tmp1 = strsplit(tmp[2],split='A')[[1]]
tmp2 = strsplit(tmp[4],split='1.bmp')[[1]]
id = NA
for (i in 1:length(KevLabels)) {
cmp = paste(strsplit(KevLabels[i],split=' ')[[1]],collapse='')
if (tmp2==cmp) id = i
}
# In some cases, some images weren't included in the replication
# study
if ( is.na(id) ) {
if ( length( NovelLabels ) > 0 ) {
for (i in 1:length(NovelLabels)) {
cmp = NovelLabels[i]
if (tmp2==cmp) id = NovelID[i]
}
if (is.na(id)) {
NovelLabels = c( NovelLabels, tmp2 )
NovelID = c( NovelID, NovelID[ length(NovelID) ] + 1 )
}
id = NovelID[ length(NovelID) ]
} else {
NovelLabels = c( NovelLabels, tmp2 );
NovelID = c( NovelID, length( OrigLabels ) + 1 )
id = NovelID[1]
}
}
PicID[ln,1] = paste(tmp1,'A',sep='')
PicID[ln,2] = paste(tmp1,'B',sep='')
tmpID[ln] = id
}
tmpID
NovelLabels
NovelID
rm(ln,tmp,tmp1,tmp2,id,cmp,i)
ls()
setwd("J:/Stuff/Kevin's Stuff/Postdoc/Wimber_et_al_2015_rep2/Analyses")
source('J:/Stuff/Kevin\'s Stuff/Postdoc/Wimber_et_al_2015_rep2/Analyses/F10_create_data_original_study_script.R', echo=TRUE)
tmp
tmp[4]
tmp[4]==PicID[,1]
sum( tmp[4]==PicID[,1] )
sum( tmp[4]==PicID[,2] )
5199150 - 5193309
chk1 = ( tmp[1] == paste(SN,'fMRI',sep='_') ) &
( tmp[3] == 'Picture' & tmp[4] != 'famInstr' ) &
( tmp[4] != 'fix' )
chk1
which( tmp[4]==PicID[,1] )
tmp = strsplit(tst[ln+1],split='\t')[[1]]
tmp
tmp[3]
tmp[4]
tmp[6]
as.numeric( tmp[6] )
as.numeric( tmp[6] )/1000
setwd("J:/Stuff/Kevin's Stuff/Postdoc/Wimber_et_al_2015_rep2/Analyses")
source('J:/Stuff/Kevin\'s Stuff/Postdoc/Wimber_et_al_2015_rep2/Analyses/F10_create_data_original_study_script.R', echo=TRUE)
nrow( curData )
curData
setwd("J:/Stuff/Kevin's Stuff/Postdoc/Wimber_et_al_2015_rep2/Analyses")
source('J:/Stuff/Kevin\'s Stuff/Postdoc/Wimber_et_al_2015_rep2/Analyses/F10_create_data_original_study_script.R', echo=TRUE)
TrialInfo
curData
setwd("J:/Stuff/Kevin's Stuff/Postdoc/Wimber_et_al_2015_rep2/Analyses")
source('J:/Stuff/Kevin\'s Stuff/Postdoc/Wimber_et_al_2015_rep2/Analyses/F10_create_data_original_study_script.R', echo=TRUE)
curData
144*2
which( curData[,4]==0 )
curData[161,]
