points( 1:n.iter, apply(dat[,,1],1,median), pch=19,col='red')
text(n.iter*.2,.1,paste('Gen. val.: ',cu,' vs ',bs,sep=''),pos=3)
plot(c(1,n.iter),c(0,1),type='n',main='Baseline',ylab='Proportion',
xlab='Iteration')
segments( 1:n.iter,
apply(dat[,,2],1,min),
1:n.iter,
apply(dat[,,2],1,max) )
segments( 1:n.iter,
apply(dat[,,2],1,quantile,prob=.25),
1:n.iter,
apply(dat[,,2],1,quantile,prob=.75), col='blue')
points( 1:n.iter, apply(dat[,,2],1,median), pch=19,col='red')
text(n.iter*.2,.1,paste('P < .05: ',
100*round(sum(stats[,1]<.05)/n.iter,2),'%',
'; SEM: ',round(colMeans(stats),2)[2],
'/',round(colMeans(stats),2)[3],sep=''),pos=3)
N = 50 # Sample size
CU = 54 # Number of cued images
BS = 18 # Number of baseline images
cu = .75
bs = .75
prp.cu.cmp = rnorm(N,cu,.1)
prp.cu.cmp[prp.cu.cmp > 1]=1
prp.cu.cmp[prp.cu.cmp < 0]=0
prp.bs.cmp = rnorm(N,bs,.1)
prp.bs.cmp[prp.bs.cmp > 1]=1
prp.bs.cmp[prp.bs.cmp < 0]=0
n.iter = 10000
dat = array(0,dim=c(n.iter,N,2))
stats = matrix(0,n.iter,3)
colnames(stats) = c('P','SEM_cu','SEM_bs')
for (it in 1:n.iter) {
x.cu = rbinom(N,CU,prp.cu.cmp)/CU
x.bs = rbinom(N,BS,prp.bs.cmp)/BS
dat[it,,] = cbind(x.cu,x.bs)
res = t.test(x.cu,x.bs,paired=T)
stats[it,1] = res$p.value
stats[it,2:3] = c(sd(x.cu),sd(x.bs))/sqrt(N)
}
x11()
par(mfrow=c(1,2))
plot(c(1,n.iter),c(0,1),type='n',main='',ylab='Proportion',
xlab='Iteration')
segments( 1:n.iter,
apply(dat[,,1],1,min),
1:n.iter,
apply(dat[,,1],1,max) )
segments( 1:n.iter,
apply(dat[,,1],1,quantile,prob=.25),
1:n.iter,
apply(dat[,,1],1,quantile,prob=.75), col='blue')
points( 1:n.iter, apply(dat[,,1],1,median), pch=19,col='red')
text(n.iter*.2,.1,paste('Gen. val.: ',cu,' vs ',bs,sep=''),pos=3)
plot(c(1,n.iter),c(0,1),type='n',main='Baseline',ylab='Proportion',
xlab='Iteration')
segments( 1:n.iter,
apply(dat[,,2],1,min),
1:n.iter,
apply(dat[,,2],1,max) )
segments( 1:n.iter,
apply(dat[,,2],1,quantile,prob=.25),
1:n.iter,
apply(dat[,,2],1,quantile,prob=.75), col='blue')
points( 1:n.iter, apply(dat[,,2],1,median), pch=19,col='red')
text(n.iter*.2,.1,paste('P < .05: ',
100*round(sum(stats[,1]<.05)/n.iter,2),'%',
'; SEM: ',round(colMeans(stats),2)[2],
'/',round(colMeans(stats),2)[3],sep=''),pos=3)
x11()
par(mfrow=c(1,2))
plot(c(1,n.iter),c(0,1),type='n',main='',ylab='Proportion',
xlab='Iteration')
segments( 1:n.iter,
apply(dat[,,1],1,min),
1:n.iter,
apply(dat[,,1],1,max) )
segments( 1:n.iter,
apply(dat[,,1],1,quantile,prob=.25),
1:n.iter,
apply(dat[,,1],1,quantile,prob=.75), col='blue')
points( 1:n.iter, apply(dat[,,1],1,median), pch=19,col='red')
text(n.iter*.2,.1,paste('Gen. val.: ',cu,' vs ',bs,sep=''),pos=3)
plot(c(1,n.iter),c(0,1),type='n',main='Baseline',ylab='Proportion',
xlab='Iteration')
segments( 1:n.iter,
apply(dat[,,2],1,min),
1:n.iter,
apply(dat[,,2],1,max) )
segments( 1:n.iter,
apply(dat[,,2],1,quantile,prob=.25),
1:n.iter,
apply(dat[,,2],1,quantile,prob=.75), col='blue')
points( 1:n.iter, apply(dat[,,2],1,median), pch=19,col='red')
text(n.iter*.2,.1,paste('P < .05: ',
100*round(sum(stats[,1]<.05)/n.iter,2),'%',
'; SEM: ',round(colMeans(stats),2)[2],
'/',round(colMeans(stats),2)[3],sep=''),pos=3)
library(rstan)
Sys.setenv(MAKEFLAGS = "-j8")
source('http://mc-stan.org/rstan/install.R', echo = TRUE, max.deparse.length = 2000)
install_rstan()
library(rstan)
model.script = "
data {
int<lower=0> J; // number of schools
real y[J]; // estimated treatment effects
real<lower=0> sigma[J]; // s.e. of effect estimates
}
parameters {
real mu;
real<lower=0> tau;
real eta[J];
}
transformed parameters {
real theta[J];
for (j in 1:J)
theta[j] <- mu + tau * eta[j];
}
model {
eta ~ normal(0, 1);
y ~ normal(theta, sigma);
}
"
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit <- stan(model_code = model.script, data = schools_dat,
iter = 1000, chains = 4)
fit
?sample
sample(1:4,4,replace=T)
sample(1:4,4,replace=T)
sample(1:4,4,replace=T)
sample(1:4,4,replace=T,prob=c(.5,.5,0,0))
sample(1:4,4,replace=T,prob=c(.5,.5,.1,.1))
sample(1:4,4,replace=T,prob=c(.4,.4,.1,.1))
sample(1:4,4,replace=T,prob=c(.4,.4,.1,.1))
sample(1:4,4,replace=T,prob=c(.4,.4,.1,.1))
sample(1:4,4,replace=T,prob=c(.4,.4,.1,.1))
sample(1:4,4,replace=T,prob=c(.4,.4,.1,.1))
sample(1:4,4,replace=T,prob=c(.4,.4,.1,.1))
sample(1:4,100,replace=T,prob=c(.4,.4,.1,.1))
test=sample(1:4,100,replace=T,prob=c(.4,.4,.1,.1))
table(tst)
table(test)
test=sample(1:4,1000,replace=T,prob=c(.4,.4,.1,.1))
table(test)
test=sample(1:4,10000,replace=T,prob=c(.4,.4,.1,.1))
table(test)
library(MASS)
setwd("J:/Stuff/Kevin's Stuff/Postdoc/Wimber_et_al_2015_replication/Analyses")
orig_dir = getwd()
setwd('..')
setwd('Subjects_ex')
init.dat = read.table('Subject_0a.csv',sep=',',header=T)
str(init.dat)
cue.images = init.dat$ImageNum[init.dat$Cond==1 & init.dat$ImageType==2]
tmp.type = init.dat$ImageType[init.dat$Cond==6]
tmp.images = init.dat$ImageNum[init.dat$Cond==6]
for ( i in 1:length(cue.images) ) {
tmp.type[which(cue.images[i]==tmp.images)]=2
}
init.dat$ImageType[init.dat$Cond==6] = tmp.type
# Clean up workspace
rm(cue.images); rm(tmp.type); rm(tmp.images); rm(i)
ls()
Header.names = colnames(init.dat)
Total.trials.per.subject = nrow(init.dat)
N = 60 # Number of subjects
fake.dat= matrix( NA, nrow = Total.trials.per.subject*N, ncol = length(Header.names)+1 )
colnames(fake.dat) = c('Subject',Header.names)
# Convert to a dataframe
fake.dat = as.data.frame(fake.dat)
fake.dat$Subject = rep(1:N,each=Total.trials.per.subject)
fake.dat$Trial = rep(1:Total.trials.per.subject,N)
fake.dat$ImageNum = rep(init.dat$ImageNum,N)
fake.dat$Cond = rep(init.dat$Cond,N)
fake.dat$Cue = rep(init.dat$Cue,N)
fake.dat$Block = rep(init.dat$Block,N)
fake.dat$Correct = rep(init.dat$Correct,N)
fake.dat$CueRep = rep(init.dat$CueRep,N)
fake.dat$fName = rep(init.dat$fName,N)
fake.dat$ImageType = rep(init.dat$ImageType,N)
fake.dat$Baseline = rep(init.dat$Baseline,N)
fake.dat$Category = rep(init.dat$Category,N)
theta.T1 = runif(N,0,.05);
# Simulate data
nTrials.T1 = sum(init.dat$Cond==1) # The number of trials for task 1
fake.dat$resp[fake.dat$Cond==1] =
rbinom( nTrials.T1*N, 1, rep( theta.T1, each = nTrials.T1 ) ) + 1;
theta.T3c1 = rnorm(N, mean = 0.771, sd = 0.029)
# Restrict theta.T3c1 to only be between 0 and 1
theta.T3c1[theta.T3c1 > 1] = 1; theta.T3c1[theta.T3c1 < 0] = 0;
# The number of trials for task 3
nTrials.T3c1 = sum(init.dat$Cond==2)
# Simulate data from a bernoulli distribution
fake.dat$Accuracy[fake.dat$Cond==2] =
rbinom( nTrials.T3c1*N, 1, rep( theta.T3c1, each = nTrials.T3c1 ) );
# Index to select specific trials
ind = fake.dat$Accuracy == 1 & !is.na(fake.dat$Accuracy) & fake.dat$Cond==2;
fake.dat$resp[ind] = fake.dat$Correct[ind]
# Index to select specific trials
ind = fake.dat$Accuracy == 0 & !is.na(fake.dat$Accuracy) & fake.dat$Cond==2;
fake.dat$resp[ind] = fake.dat$Correct[ind]-1
fake.dat$resp[fake.dat$resp==0] = 2
theta.T3c2 = rnorm(N, mean = 0.864, sd = 0.026)
# Restrict theta.T3 to only be between 0 and 1
theta.T3c2[theta.T3c2 > 1] = 1; theta.T3c2[theta.T3c2 < 0] = 0;
# The number of trials for task 3
nTrials.T3c2 = sum(init.dat$Cond==3)
# Simulate data from a bernoulli distribution
fake.dat$Accuracy[fake.dat$Cond==3] =
rbinom( nTrials.T3c2*N, 1, rep( theta.T3c2, each = nTrials.T3c2 ) );
# Index to select specific trials
ind = fake.dat$Accuracy == 1 & !is.na(fake.dat$Accuracy) & fake.dat$Cond==3;
fake.dat$resp[ind] = fake.dat$Correct[ind]
# Index to select specific trials
ind = fake.dat$Accuracy == 0 & !is.na(fake.dat$Accuracy) & fake.dat$Cond==3;
fake.dat$resp[ind] = fake.dat$Correct[ind]-1
fake.dat$resp[fake.dat$resp==0] = 2
theta.Tr1 = rnorm(N, mean = 0.70, sd = 0.03)
# Restrict theta.T3 to only be between 0 and 1
theta.Tr1[theta.Tr1 > 1] = 1; theta.Tr1[theta.Tr1 < 0] = 0;
# The number of trials for task 3
nTrials.Tr1 = sum(init.dat$Cond==4)
# Simulate data from a bernoulli distribution
fake.dat$Accuracy[fake.dat$Cond==4] =
rbinom( nTrials.Tr1*N, 1, rep( theta.Tr1, each = nTrials.Tr1 ) );
# Index to select specific trials
ind = fake.dat$Accuracy == 1 & !is.na(fake.dat$Accuracy) & fake.dat$Cond==4;
fake.dat$resp[ind] = fake.dat$Correct[ind]
# Index to select specific trials
ind = fake.dat$Accuracy == 0 & !is.na(fake.dat$Accuracy) & fake.dat$Cond==4;
fake.dat$resp[ind] = fake.dat$Correct[ind]-1
fake.dat$resp[fake.dat$resp==0] = 2
theta.T5 = cbind(
rnorm(N, mean = 0.85, sd = 0.05),
rnorm(N, mean = 0.82, sd = 0.05),
rnorm(N, mean = 0.821, sd = 0.05),
rnorm(N, mean = 0.752, sd = 0.05) )
colnames(theta.T5) = c('bt','ct','bc','cc')
# Restrict theta.T5 to only be between 0 and 1
theta.T5[theta.T5 > 1] = 1; theta.T5[theta.T5 < 0] = 0;
# The number of trials for task 5
nTrials.T5 = sum(init.dat$Cond==6)
# Simulate data from a bernoulli distribution
param = numeric(nTrials.T5*N)
i1 = fake.dat$ImageType[init.dat$Cond==6]
i2 = fake.dat$Baseline[init.dat$Cond==6]
param[i1 == 1 & i2 == 1] = rep(theta.T5[,1],each=18)
param[i1 == 1 & i2 == 0] = rep(theta.T5[,2],each=18)
param[i1 == 2 & i2 == 1] = rep(theta.T5[,3],each=18)
param[i1 == 2 & i2 == 0] = rep(theta.T5[,4],each=18)
fake.dat$Accuracy[fake.dat$Cond==6] = rbinom(nTrials.T5*N,1,param)
ind = fake.dat$Accuracy == 1 & !is.na(fake.dat$Accuracy) & fake.dat$Cond==6;
fake.dat$resp[ind] = fake.dat$Correct[ind]
# Index to select specific trials
ind = fake.dat$Accuracy == 0 & !is.na(fake.dat$Accuracy) & fake.dat$Cond==6;
fake.dat$resp[ind] = fake.dat$Correct[ind]-1
fake.dat$resp[fake.dat$resp==0] = 2
head(fake.dat)
rm(list=ls())
setwd("J:/Stuff/Kevin's Stuff/Postdoc/Wimber_et_al_2015_replication/Analyses")
library(MASS)
# Save current directory
orig_dir = getwd()
setwd('..')
setwd('Subjects_ex')
init.dat = read.table('Subject_0a.csv',sep=',',header=T)
cue.images = init.dat$ImageNum[init.dat$Cond==1 & init.dat$ImageType==2]
tmp.type = init.dat$ImageType[init.dat$Cond==6]
tmp.images = init.dat$ImageNum[init.dat$Cond==6]
for ( i in 1:length(cue.images) ) {
tmp.type[which(cue.images[i]==tmp.images)]=2
}
init.dat$ImageType[init.dat$Cond==6] = tmp.type
# Clean up workspace
rm(cue.images); rm(tmp.type); rm(tmp.images); rm(i)
Header.names = colnames(init.dat)
Total.trials.per.subject = nrow(init.dat)
N = 60 # Number of subjects
# Matrix to store simulated data
fake.dat= matrix( NA, nrow = Total.trials.per.subject*N, ncol = length(Header.names)+1 )
colnames(fake.dat) = c('Subject',Header.names)
# Convert to a dataframe
fake.dat = as.data.frame(fake.dat)
# Fill in the non-response aspects of the data matrix
fake.dat$Subject = rep(1:N,each=Total.trials.per.subject)
fake.dat$Trial = rep(1:Total.trials.per.subject,N)
# For simplicity, we'll assume everyone saw the same ordering of
# stimuli, and we'll use the data from my debugging session.
fake.dat$ImageNum = rep(init.dat$ImageNum,N)
fake.dat$Cond = rep(init.dat$Cond,N)
fake.dat$Cue = rep(init.dat$Cue,N)
fake.dat$Block = rep(init.dat$Block,N)
fake.dat$Correct = rep(init.dat$Correct,N)
fake.dat$CueRep = rep(init.dat$CueRep,N)
fake.dat$fName = rep(init.dat$fName,N)
fake.dat$ImageType = rep(init.dat$ImageType,N)
fake.dat$Baseline = rep(init.dat$Baseline,N)
fake.dat$Category = rep(init.dat$Category,N)
theta.T1 = runif(N,0,.05);
# Simulate data
nTrials.T1 = sum(init.dat$Cond==1) # The number of trials for task 1
fake.dat$Response[fake.dat$Cond==1] =
rbinom( nTrials.T1*N, 1, rep( theta.T1, each = nTrials.T1 ) ) + 1;
### Task 3: Recall and recognition, cycle 1 ###
# Lookup - 02b
# Parameters
theta.T3c1 = rnorm(N, mean = 0.771, sd = 0.029)
# Restrict theta.T3c1 to only be between 0 and 1
theta.T3c1[theta.T3c1 > 1] = 1; theta.T3c1[theta.T3c1 < 0] = 0;
# The number of trials for task 3
nTrials.T3c1 = sum(init.dat$Cond==2)
# Simulate data from a bernoulli distribution
fake.dat$Accuracy[fake.dat$Cond==2] =
rbinom( nTrials.T3c1*N, 1, rep( theta.T3c1, each = nTrials.T3c1 ) );
# Index to select specific trials
ind = fake.dat$Accuracy == 1 & !is.na(fake.dat$Accuracy) & fake.dat$Cond==2;
fake.dat$Response[ind] = fake.dat$Correct[ind]
# Index to select specific trials
ind = fake.dat$Accuracy == 0 & !is.na(fake.dat$Accuracy) & fake.dat$Cond==2;
fake.dat$Response[ind] = fake.dat$Correct[ind]-1
fake.dat$Response[fake.dat$Response==0] = 2
### Task 3: Recall and recognition, cycle 2 ###
# Lookup - 02c
# Parameters
theta.T3c2 = rnorm(N, mean = 0.864, sd = 0.026)
# Restrict theta.T3 to only be between 0 and 1
theta.T3c2[theta.T3c2 > 1] = 1; theta.T3c2[theta.T3c2 < 0] = 0;
# The number of trials for task 3
nTrials.T3c2 = sum(init.dat$Cond==3)
# Simulate data from a bernoulli distribution
fake.dat$Accuracy[fake.dat$Cond==3] =
rbinom( nTrials.T3c2*N, 1, rep( theta.T3c2, each = nTrials.T3c2 ) );
# Index to select specific trials
ind = fake.dat$Accuracy == 1 & !is.na(fake.dat$Accuracy) & fake.dat$Cond==3;
fake.dat$Response[ind] = fake.dat$Correct[ind]
# Index to select specific trials
ind = fake.dat$Accuracy == 0 & !is.na(fake.dat$Accuracy) & fake.dat$Cond==3;
fake.dat$Response[ind] = fake.dat$Correct[ind]-1
fake.dat$Response[fake.dat$Response==0] = 2
### Task 3 repeat: Recall and recognition, cycle 1 ###
# Lookup - 02d
# Parameters
theta.Tr1 = rnorm(N, mean = 0.70, sd = 0.03)
# Restrict theta.T3 to only be between 0 and 1
theta.Tr1[theta.Tr1 > 1] = 1; theta.Tr1[theta.Tr1 < 0] = 0;
# The number of trials for task 3
nTrials.Tr1 = sum(init.dat$Cond==4)
# Simulate data from a bernoulli distribution
fake.dat$Accuracy[fake.dat$Cond==4] =
rbinom( nTrials.Tr1*N, 1, rep( theta.Tr1, each = nTrials.Tr1 ) );
# Index to select specific trials
ind = fake.dat$Accuracy == 1 & !is.na(fake.dat$Accuracy) & fake.dat$Cond==4;
fake.dat$Response[ind] = fake.dat$Correct[ind]
# Index to select specific trials
ind = fake.dat$Accuracy == 0 & !is.na(fake.dat$Accuracy) & fake.dat$Cond==4;
fake.dat$Response[ind] = fake.dat$Correct[ind]-1
fake.dat$Response[fake.dat$Response==0] = 2
### Task 5: Final recognition ###
# Lookup - 02e
# Baseline      Yes   No
# Target   Yes | bt | ct
#          No  | bc | cc
# Parameters
theta.T5 = cbind(
rnorm(N, mean = 0.85, sd = 0.05),
rnorm(N, mean = 0.82, sd = 0.05),
rnorm(N, mean = 0.821, sd = 0.05),
rnorm(N, mean = 0.752, sd = 0.05) )
colnames(theta.T5) = c('bt','ct','bc','cc')
# Restrict theta.T5 to only be between 0 and 1
theta.T5[theta.T5 > 1] = 1; theta.T5[theta.T5 < 0] = 0;
# The number of trials for task 5
nTrials.T5 = sum(init.dat$Cond==6)
# Simulate data from a bernoulli distribution
param = numeric(nTrials.T5*N)
i1 = fake.dat$ImageType[init.dat$Cond==6]
i2 = fake.dat$Baseline[init.dat$Cond==6]
param[i1 == 1 & i2 == 1] = rep(theta.T5[,1],each=18)
param[i1 == 1 & i2 == 0] = rep(theta.T5[,2],each=18)
param[i1 == 2 & i2 == 1] = rep(theta.T5[,3],each=18)
param[i1 == 2 & i2 == 0] = rep(theta.T5[,4],each=18)
fake.dat$Accuracy[fake.dat$Cond==6] = rbinom(nTrials.T5*N,1,param)
# Index to select specific trials
ind = fake.dat$Accuracy == 1 & !is.na(fake.dat$Accuracy) & fake.dat$Cond==6;
fake.dat$Response[ind] = fake.dat$Correct[ind]
# Index to select specific trials
ind = fake.dat$Accuracy == 0 & !is.na(fake.dat$Accuracy) & fake.dat$Cond==6;
fake.dat$Response[ind] = fake.dat$Correct[ind]-1
fake.dat$Response[fake.dat$Response==0] = 2
head(fake.dat)
fake.dat$Response
ind = init.dat$Cond==5 & init.dat$CueRep==1
response = init.dat$Response[ind]
accuracy = init.dat$Accuracy[ind]
target = init.dat$Correct[ind]
competitor = round( 10*(init.dat$Category[ind] - floor(init.dat$Category[ind])) )
unrelated = numeric(length(response))
tmp = 1:3
for (i in 1:length(response)) {
unrelated[i] = tmp[ c( -target[i], -competitor[i] ) ]
}
unknown = rep(4,length(response))
sum( response==target )/length(response)
sum( response==competitor )/length(response)
sum( response==unrelated )/length(response)
sum( response==unknown )/length(response)
soft.max = function(x) {
exp(x) / sum( exp(x) )
}
f.1 = function(x,y) {
tmp = soft.max(x)
sum( (y - tmp)^2 )
}
y = c( .75, .15, .1, 0)
res = optim(rnorm(4),f.1,y = y )
cnt=rep(1,nrow(init.dat))
aggregate(cnt[init.dat$Cond==5],
list( init.dat$Response[init.dat$Cond==5],
init.dat$repetition[init.dat$Cond==5]),
mean)
head(init.dat)
cnt=rep(1,nrow(init.dat))
aggregate(cnt[init.dat$Cond==5],
list( init.dat$Response[init.dat$Cond==5],
init.dat$CueRep[init.dat$Cond==5]),
mean)
cnt=rep(1,nrow(init.dat))
aggregate(cnt[init.dat$Cond==5],
list( init.dat$Response[init.dat$Cond==5],
init.dat$CueRep[init.dat$Cond==5]),
sum)
init.dat$CueRep[init.dat$Cond==5]
ctgry = 1:4
response
ind = init.dat$Cond==5 #& init.dat$CueRep==1
response = init.dat$Response[ind]
accuracy = init.dat$Accuracy[ind]
target = init.dat$Correct[ind]
competitor = round( 10*(init.dat$Category[ind] - floor(init.dat$Category[ind])) )
unrelated = numeric(length(response))
response
accuracy
target
competitor
unrelated
tmp = 1:3
for (i in 1:length(response)) {
unrelated[i] = tmp[ c( -target[i], -competitor[i] ) ]
}
unrelated
unknown = rep(4,length(response))
unknown
cbind( target, competitor, unrelated, unknown )
test = cbind( target, competitor, unrelated, unknown )
test[1,]
repetitions = init.dat$CueRep[init.dat$Cond==5]
repetitions
theta.T4[repetitions[1],]
theta.T4 = rbind(
c(.7,.2,.05,.05),
c(.75,.15,.05,.05),
c(.8,.1,.05,.05),
c(.85,.05,.05,.05) )
theta.T4
theta.T4[repetitions[1],]
test[1,]
new.vec = numeric(4)
new.vec = numeric(4)
new.vec[ test[1,] ] = theta.T4[repetitions[1]]
new.vec
new.vec = numeric(4)
new.vec[ test[1,] ] = theta.T4[repetitions[1],]
new.vec
nTrials.T4 = sum(init.dat$Cond==5)
nTrials.T4
18*4
nTrials.T4 = sum(init.dat$Cond==5)
theta.sel.ret = matrix(0,nrow=nTrials.T4,ncol=4)
nTrials.T4 = sum(init.dat$Cond==5)
theta.sel.ret = matrix(0,nrow=nTrials.T4,ncol=4)
for (nt in 1:nTrials.T4) {
theta.sel.ret[ nt, test[nt,] ] = theta.T4[repetitions[nt],]
}
theta.sel.ret
sample(1:4,1,prob = theta.sel.ret[nt,]
)
sample(1:4,1,prob = theta.sel.ret[nt,])
sample(1:4,1,prob = theta.sel.ret[nt,])
sample(1:4,1,prob = theta.sel.ret[nt,])
sample(1:4,1,prob = theta.sel.ret[nt,])
sample(1:4,1,prob = theta.sel.ret[nt,])
sample(1:4,1,prob = theta.sel.ret[nt,])
sample(1:4,1,prob = theta.sel.ret[nt,])
sample(1:4,1,prob = theta.sel.ret[nt,])
sample(1:4,1,prob = theta.sel.ret[nt,])
sample(1:4,1,prob = theta.sel.ret[nt,])
sample(1:4,1,prob = theta.sel.ret[nt,])
sample(1:4,1,prob = theta.sel.ret[nt,])
sample(1:4,1,prob = theta.sel.ret[nt,])
sim.resp = numeric(nTrials.T4)
sim.resp = numeric(nTrials.T4)
nTrials.T4 = sum(init.dat$Cond==5)
theta.sel.ret = matrix(0,nrow=nTrials.T4,ncol=4)
for (nt in 1:nTrials.T4) {
theta.sel.ret[ nt, test[nt,] ] = theta.T4[repetitions[nt],]
sim.resp[nt] = sample(1:4,1,prob = theta.sel.ret[nt,])
}
sim.resp
