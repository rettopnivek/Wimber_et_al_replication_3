b = -threshold[2]
output = as.numeric( x %*% w + b > 0 )
allOutput[[2]] = output
# Final output
w = weights[[3]]
x = output
b = -threshold[3]
output = as.numeric( x %*% w + b > 0 )
allOutput[[3]] = output
allOutput
}
twolayer(input,weights,threshold)
threshold = runif(3)*150
twolayer(input,weights,threshold)
twolayer(input,weights,threshold)
threshold = runif(3)*150
twolayer(input,weights,runif(3)*2)
twolayer(input,weights,runif(3)*2)
twolayer(input,weights,runif(3)*2)
twolayer(input,weights,runif(3)*2)
twolayer(input,weights,runif(3)*2)
twolayer(input,weights,runif(3)*2)
twolayer(input,weights,runif(3)*2)
threelayer = function( input, weights, threshold ) {
# Stores output for each layer
allOutput = list( NULL, NULL, NULL )
# First layer
w = weights[[1]]
x = input
b = -threshold[1]
output = as.numeric( x %*% w + b > 0 )
allOutput[[1]] = output
# Second layer
w = weights[[2]]
x = output
b = -threshold[2]
output = as.numeric( x %*% w + b > 0 )
allOutput[[2]] = output
# Final output
w = weights[[3]]
x = output
b = -threshold[3]
output = as.numeric( x %*% w + b > 0 )
allOutput[[3]] = output
allOutput
}
# Example of function
nP = c( 3, 4, 1 ) # First layer has 3, second has 4, last has 1
# Randomly initialize input
input = rbinom( 5, 1, .5 )
# Define set of weights for each layer
weights = list( NULL, NULL, NULL )
# Randomly initialize weights
weights[[1]] = matrix( runif(length(input)*nP[1]), length(input), nP[1] )
weights[[2]] = matrix( runif(np[1]*nP[2]), nP[1], nP[2] )
weights[[3]] = matrix( runif(np[2]*nP[3]), nP[2], nP[3] )
# Randomly set threshold
threshold = runif(3)*4
# Randomly initialize weights
weights[[1]] = matrix( runif(length(input)*nP[1]), length(input), nP[1] )
weights[[2]] = matrix( runif(nP[1]*nP[2]), nP[1], nP[2] )
weights[[3]] = matrix( runif(nP[2]*nP[3]), nP[2], nP[3] )
# Randomly set threshold
threshold = runif(3)*4
# Compute output
threelayer( input, weights, threshold )
# Randomly initialize weights
weights[[1]] = matrix( runif(length(input)*nP[1]), length(input), nP[1] )
weights[[2]] = matrix( runif(nP[1]*nP[2]), nP[1], nP[2] )
weights[[3]] = matrix( runif(nP[2]*nP[3]), nP[2], nP[3] )
# Randomly set threshold
threshold = runif(3)*4
# Compute output
threelayer( input, weights, threshold )
# Randomly initialize weights
weights[[1]] = matrix( runif(length(input)*nP[1]), length(input), nP[1] )
weights[[2]] = matrix( runif(nP[1]*nP[2]), nP[1], nP[2] )
weights[[3]] = matrix( runif(nP[2]*nP[3]), nP[2], nP[3] )
# Randomly set threshold
threshold = runif(3)*4
# Compute output
threelayer( input, weights, threshold )
# Randomly initialize weights
weights[[1]] = matrix( runif(length(input)*nP[1]), length(input), nP[1] )
weights[[2]] = matrix( runif(nP[1]*nP[2]), nP[1], nP[2] )
weights[[3]] = matrix( runif(nP[2]*nP[3]), nP[2], nP[3] )
# Randomly set threshold
threshold = runif(3)*4
# Compute output
threelayer( input, weights, threshold )
# Randomly initialize weights
weights[[1]] = matrix( runif(length(input)*nP[1]), length(input), nP[1] )
weights[[2]] = matrix( runif(nP[1]*nP[2]), nP[1], nP[2] )
weights[[3]] = matrix( runif(nP[2]*nP[3]), nP[2], nP[3] )
# Randomly set threshold
threshold = runif(3)*4
# Compute output
threelayer( input, weights, threshold )
# Randomly initialize weights
weights[[1]] = matrix( runif(length(input)*nP[1]), length(input), nP[1] )
weights[[2]] = matrix( runif(nP[1]*nP[2]), nP[1], nP[2] )
weights[[3]] = matrix( runif(nP[2]*nP[3]), nP[2], nP[3] )
# Randomly set threshold
threshold = runif(3)*4
# Compute output
threelayer( input, weights, threshold )
# Randomly initialize weights
weights[[1]] = matrix( runif(length(input)*nP[1]), length(input), nP[1] )
weights[[2]] = matrix( runif(nP[1]*nP[2]), nP[1], nP[2] )
weights[[3]] = matrix( runif(nP[2]*nP[3]), nP[2], nP[3] )
# Randomly set threshold
threshold = runif(3)*4
# Compute output
threelayer( input, weights, threshold )
# Randomly initialize weights
weights[[1]] = matrix( runif(length(input)*nP[1]), length(input), nP[1] )
weights[[2]] = matrix( runif(nP[1]*nP[2]), nP[1], nP[2] )
weights[[3]] = matrix( runif(nP[2]*nP[3]), nP[2], nP[3] )
# Randomly set threshold
threshold = runif(3)*4
# Compute output
threelayer( input, weights, threshold )
# Randomly initialize weights
weights[[1]] = matrix( runif(length(input)*nP[1]), length(input), nP[1] )
weights[[2]] = matrix( runif(nP[1]*nP[2]), nP[1], nP[2] )
weights[[3]] = matrix( runif(nP[2]*nP[3]), nP[2], nP[3] )
# Randomly set threshold
threshold = runif(3)*4
# Compute output
threelayer( input, weights, threshold )
sigma = function(z) {
out = 1 + exp( -z )
1/out
}
sigmoidNeuron = function( x, w, b ) {
z = x %*% w - b
sigma(z)
}
sigmoidNeuron( c( .5, .5, .5 ), runif(3), 2 )
sigmoidNeuron( c( .5, .5, .5 ), runif(3), 1 )
val = log( seq( 0, 1, length = 100 ) )
f = function(x,par) .5 + .5/(1 + exp( -par[1]*x + par[2] ) )
y = f(val,c(1,3.5)
)
plot( val, y )
val
val = log( seq( .01, .99, length = 100 ) )
y = f(val,c(1,3.5))
plot( val, y,type='l')
y = f(val,c(2,3.5))
plot( val, y,type='l')
y = f(val,c(.5,3.5))
plot( val, y,type='l')
f = function(x,par) .5 + .5/(1 + exp( -par[1]*(x + par[2]) ) )
y = f(val,c(.5,3.5))
plot( val, y,type='l')
y = f(val,c(1,3.5))
plot( val, y,type='l')
y = f(val,c(1.5,2.5))
plot( val, y,type='l')
plot( val, y,type='l')
y = f(val,c(1.5,2.5))
plot( val, y,type='l',ylim=c(.5,1))
y = f(val,c(2,1.5))
plot( val, y,type='l',ylim=c(.5,1))
y = f(val,c(2,3.5))
plot( val, y,type='l',ylim=c(.5,1))
y = f(val,c(2,2))
plot( val, y,type='l',ylim=c(.5,1))
y = f(val,c(.5,2))
plot( val, y,type='l',ylim=c(.5,1))
y = f(val,c(3,2))
plot( val, y,type='l',ylim=c(.5,1))
y = f(val,c(3,3))
plot( val, y,type='l',ylim=c(.5,1))
y = f(val,c(2,3))
plot( val, y,type='l',ylim=c(.5,1))
24*4
72*2
I = 144
Items = 1:I
# Number of items assigned to each condition
nTrials = c( 54, 18, 54, 18 )
I
Items
I = 144
Items = 1:I
# Number of items assigned to each condition
nTrials = c( 54, 18, 54, 18 )
ItemType = c( rep( 2, nTrials[1] ),
rep( 2, nTrials[2] ),
rep( 1, nTrials[3] ),
rep( 1, nTrials[4] ) )
Baseline = c( rep( 0, nTrials[1] ),
rep( 1, nTrials[2] ),
rep( 0, nTrials[3] ),
rep( 1, nTrials[4] ) )
cbind( Items, ItemType, Baseline )
8 + 8 + 4 + 4
I = 144
Items = 1:I
# Number of items assigned to each condition
nTrials = c( 54, 18, 54, 18 )
ItemType = c( rep( 2, nTrials[1] ),
rep( 2, nTrials[2] ),
rep( 1, nTrials[3] ),
rep( 1, nTrials[4] ) )
Baseline = c( rep( 0, nTrials[1] ),
rep( 1, nTrials[2] ),
rep( 0, nTrials[3] ),
rep( 1, nTrials[4] ) )
N = 24
Assignment = array( NA, dim = c( I, 3, N ) )
s = 1
Assignment[,,s] = cbind( Items, ItemType, Baseline )
144/24
source('~/.active-rstudio-document', echo=TRUE)
str(Assignment)
chk = c()
for ( s in 1:N ) {
chk = rbind( chk, Assignment[,,s] )
}
aggregate( rep(1,nrow(chk)), list( chk[,1] ), sum )
aggregate( rep(1,nrow(chk)), list( chk[,1], chk[,2], chk[,3] ), sum )
24*2
I = 144 # Number of items
Items = 1:I # Item indices
# Number of items assigned to each condition
nTrials = c( 54, 18, 54, 18 )
# Covariates for conditions
ItemType = c( rep( 2, nTrials[1] ),
rep( 2, nTrials[2] ),
rep( 1, nTrials[3] ),
rep( 1, nTrials[4] ) )
Baseline = c( rep( 0, nTrials[1] ),
rep( 1, nTrials[2] ),
rep( 0, nTrials[3] ),
rep( 1, nTrials[4] ) )
N = 48 # Number of subjects
# Array to store covariates
Assignment = array( NA, dim = c( I, 3, N ) )
# Want balanced assignment to 1st and 2nd associates:
for ( s in 1:(N/2) ) {
Assignment[,,s] = cbind( Items, ItemType, Baseline )
}
for ( s in (N/2 + ):N ) {
Assignment[,,s] = cbind( c(Items[(I/2+1):I,1:(I/2)], ItemType, Baseline )
}
I = 144 # Number of items
Items = 1:I # Item indices
# Number of items assigned to each condition
nTrials = c( 54, 18, 54, 18 )
# Covariates for conditions
ItemType = c( rep( 2, nTrials[1] ),
rep( 2, nTrials[2] ),
rep( 1, nTrials[3] ),
rep( 1, nTrials[4] ) )
Baseline = c( rep( 0, nTrials[1] ),
rep( 1, nTrials[2] ),
rep( 0, nTrials[3] ),
rep( 1, nTrials[4] ) )
N = 48 # Number of subjects
# Array to store covariates
Assignment = array( NA, dim = c( I, 3, N ) )
# Want balanced assignment to 1st and 2nd associates:
for ( s in 1:(N/2) ) {
Assignment[,,s] = cbind( Items, ItemType, Baseline )
}
for ( s in (N/2 + 1):N ) {
Assignment[,,s] = cbind( c(Items[(I/2+1):I,1:(I/2)], ItemType, Baseline )
}
N = 48 # Number of subjects
# Array to store covariates
Assignment = array( NA, dim = c( I, 3, N ) )
# Want balanced assignment to 1st and 2nd associates:
for ( s in 1:(N/2) ) {
Assignment[,,s] = cbind( Items, ItemType, Baseline )
}
for ( s in (N/2 + 1):N ) {
Assignment[,,s] = cbind( c(Items[c( (I/2+1):I,1:(I/2) )], ItemType, Baseline )
}
for ( s in (N/2 + 1):N ) {
Assignment[,,s] = cbind( Items[c( (I/2+1):I,1:(I/2) )], ItemType, Baseline )
}
# convert to long format
chk = c()
for ( s in 1:N ) {
chk = rbind( chk, Assignment[,,s] )
}
f = function(x) {
out = numeric(4)
out[1] = sum( x[2] == 2 & x[3] == 0 )
out[2] = sum( x[2] == 2 & x[3] == 1 )
out[3] = sum( x[2] == 1 & x[3] == 0 )
out[4] = sum( x[2] == 1 & x[3] == 1 )
return( out )
}
tmp = aggregate( rep(1,nrow(chk)), list( chk[,1] ), f )
head( tmp )
tmp
i=1
sel = chk[,1] == i
chk[sel,]
sample( Assignment[1:(I/2),1,s] )
sample( Assignment[(I/2+1):I,1,s] )
Assignment[,,1]
tmp = matrix(0,I,4)
for (i in 1:I) {
sel = chk[,1] == i
tmp[i,1] = sum( chk[sel,2] == 2 & chk[sel,3] == 0 )
tmp[i,2] = sum( chk[sel,2] == 2 & chk[sel,3] == 1 )
tmp[i,3] = sum( chk[sel,2] == 1 & chk[sel,3] == 0 )
tmp[i,4] = sum( chk[sel,2] == 1 & chk[sel,3] == 1 )
}
tmp
chk[sel,3]
source('~/.active-rstudio-document', echo=TRUE)
tmp[,1] + tmp[,2]
48*3
nCat = 48 # Number of items per category
I = nCat*3 # Number of items (144)
Items = 1:I # Item indices
Category = rep( 1:3, each = 48 ) # Category indices
nCat = 48 # Number of items per category
I = nCat*3 # Number of items (144)
Items = 1:I # Item indices
Category = c( rep( 1:3, each = nCat/2 ),
rep( 1:3, each = nCat/2 ) ) # Category indices
Category
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
paste( "F_Image_", 1:(nCat/2), ".bmp", sep = " " )
paste( "F_Image_", 1:(nCat/2), ".bmp", sep = "" )
source('~/.active-rstudio-document', echo=TRUE)
labels = c(
paste( "F_Image_", 1:(nCat/2), ".bmp", sep = "" ),
paste( "O_Image_", 1:(nCat/2), ".bmp", sep = "" ),
paste( "S_Image_", 1:(nCat/2), ".bmp", sep = "" ),
paste( "F_Image_", (nCat/2 + 1):nCat, ".bmp", sep = "" ),
paste( "O_Image_", (nCat/2 + 1):nCat, ".bmp", sep = "" ),
paste( "S_Image_", (nCat/2 + 1):nCat, ".bmp", sep = "" )
)
labels
labels[ 1:72 ]
nCat = 48 # Number of items per category
I = nCat*3 # Number of items (144)
Items = 1:I # Item indices
Category = c( rep( 1:3, each = nCat/2 ),
rep( 1:3, each = nCat/2 ) ) # Category indices
# Number of items assigned to each condition
nTrials = c( 54, 18, 54, 18 )
# Covariates for conditions
ItemType = c( rep( 2, nTrials[1] ),
rep( 2, nTrials[2] ),
rep( 1, nTrials[3] ),
rep( 1, nTrials[4] ) )
Baseline = c( rep( 0, nTrials[1] ),
rep( 1, nTrials[2] ),
rep( 0, nTrials[3] ),
rep( 1, nTrials[4] ) )
labels = c(
paste( "F_Image_", 1:(nCat/2), ".bmp", sep = "" ),
paste( "O_Image_", 1:(nCat/2), ".bmp", sep = "" ),
paste( "S_Image_", 1:(nCat/2), ".bmp", sep = "" ),
paste( "F_Image_", (nCat/2 + 1):nCat, ".bmp", sep = "" ),
paste( "O_Image_", (nCat/2 + 1):nCat, ".bmp", sep = "" ),
paste( "S_Image_", (nCat/2 + 1):nCat, ".bmp", sep = "" )
)
N = 24 # Number of subjects
# Array to store covariates
Assignment = array( NA, dim = c( I, 4, N ) )
s = 1
Assignment[,,s] = cbind( Items, ItemType, Baseline, Category )
Assignment[,,1]
cbind( Assignment[1:72,c(1,4)], Assignment[1:72,c(1,4)] )
cbind( Assignment[1:72,c(1,4),1], Assignment[73:144,c(1,4),1] )
1:nCat/2
1:(nCat/2)
Category
Items
1:72
Category[ 1:72 ]
sel = sample( 1:72 )
sel
Category[ sel ]
Category[ sel ]
Category[ 1:72 ]
Items[second][Category[second]!=1]
first = 1:(I/2)
second = (I/2+1):I
Items[second][Category[second]!=1]
Items[second][Category[second]!=1]
Items[second][Category[second]!=1]
Target_sel = matrix( rep( c(1,0), each = I/2 ), I, N )
Target_sel[,1]
rowSums( Target_sel )
rowSums( t( apply( Target_sel, 1, sample ) ) )
rowSums( t( apply( Target_sel, 2, sample ) ) )
rowSums( apply( Target_sel, 2, sample ) )
# Matrix for assignment of items to targets/competitors
Target_sel = matrix( rep( c(1,0), each = I/2 ), I, N )
Target_sel = apply( Target_sel, 2, sample )
for ( i in seq(2,N,2) ) {
Target_sel[,i] = 1 - Target_sel[,i-1]
}
rowSums( Target_sel )
rowSums( Target_sel[,1:4] )
rowSums( Target_sel[,1:8] )
rowSums( Target_sel[,1:6] )
nCat = 48 # Number of items per category
I = nCat*3 # Number of items (144)
Items = 1:I # Item indices
Category = c( rep( 1:3, each = nCat/2 ),
rep( 1:3, each = nCat/2 ) ) # Category indices
# Number of items assigned to each condition
nTrials = c( 54, 18, 54, 18 )
# Covariates for conditions
ItemType = c( rep( 2, nTrials[1] ),
rep( 2, nTrials[2] ),
rep( 1, nTrials[3] ),
rep( 1, nTrials[4] ) )
Baseline = c( rep( 0, nTrials[1] ),
rep( 1, nTrials[2] ),
rep( 0, nTrials[3] ),
rep( 1, nTrials[4] ) )
Items
Category
nCat = 48 # Number of items per category
I = nCat*3 # Number of items (144)
Items = 1:I # Item indices
Category = c( rep( 1:3, each = nCat ) ) # Category indices
Category
Items[ Category == 1 ]
Items[ Category == 1 ]
assigned = sample( Items[ Category == 1 ] )[ 1:(nCat/2) ]
assigned
union( assigned, Items )
setdiff( assigned, Items )
intersect( assigned, Items )
intersect( assigned, Items ) %in% assigned
Items %in% assigned
!(Items %in% assigned)
assigned = sample( Items[ Category == 1 ] )[ 1:(nCat/2) ]
unassigned = Items[ !(Items %in% assigned) ]
unassigned
assigned = numeric( I/2 )
assigned[ 1:(nCat/2) ] = sample( Items[ Category == 1 ] )[ 1:(nCat/2) ]
assigned[ 1:(nCat/2) + nCat ] = sample( Items[ Category == 2 ] )[ 1:(nCat/2) ]
assigned[ 1:(nCat/2) + 2*nCat ] = sample( Items[ Category == 3 ] )[ 1:(nCat/2) ]
assigned
1:(nCat/2)
1:(nCat/2) + nCat
1:(nCat/2) + 2*nCat
assigned = numeric( I/2 )
assigned[ 1:halfCat ] = sample( Items[ Category == 1 ] )[ 1:halfCat ]
assigned[ 1:halfCat + halfCat ] = sample( Items[ Category == 2 ] )[ 1:halfCat ]
assigned[ 1:halfCat + 2*halfCat ] = sample( Items[ Category == 3 ] )[ 1:halfCat ]
nCat = 48 # Number of items per category
halfCat = nCat/2 # Divide number of items in half
I = nCat*3 # Number of items (144)
Items = 1:I # Item indices
Category = c( rep( 1:3, each = nCat ) ) # Category indices
# Assign half of the images to the Target condition for each category
assigned = numeric( I/2 )
assigned[ 1:halfCat ] = sample( Items[ Category == 1 ] )[ 1:halfCat ]
assigned[ 1:halfCat + halfCat ] = sample( Items[ Category == 2 ] )[ 1:halfCat ]
assigned[ 1:halfCat + 2*halfCat ] = sample( Items[ Category == 3 ] )[ 1:halfCat ]
assigned
Targets
nCat = 48 # Number of items per category
halfCat = nCat/2 # Divide number of items in half
I = nCat*3 # Number of items (144)
Items = 1:I # Item indices
Category = c( rep( 1:3, each = nCat ) ) # Category indices
# Assign half of the images to the Target condition for each category
Targets = numeric( I/2 )
Targets[ 1:halfCat ] = sample( Items[ Category == 1 ] )[ 1:halfCat ]
Targets[ 1:halfCat + halfCat ] = sample( Items[ Category == 2 ] )[ 1:halfCat ]
Targets[ 1:halfCat + 2*halfCat ] = sample( Items[ Category == 3 ] )[ 1:halfCat ]
Targets
Targets[ Category ]
Category[ Targets ]
Competitors = Items[ -Targets ]
nCat = 48 # Number of items per category
halfCat = nCat/2 # Divide number of items in half
I = nCat*3 # Number of items (144)
Items = 1:I # Item indices
Category = c( rep( 1:3, each = nCat ) ) # Category indices
# Assign half of the images to the Target condition for each category
Targets = numeric( I/2 )
for ( i in 1:3 ) {
Targets[ 1:halfCat + halfCat*(i-1) ] =
sample( Items[ Category == i ] )[ 1:halfCat ]
}
Targets
Competitors = Items[ -Targets ]
Target_sel = rep( 0, I )
Target_sel[ Targets ] = 1
Target_sel
Increment = 1:(I/2)
# unassigned = 0
Matching[ 1:halfCat ] = sample( Increment[ Category != i ] )[1:halfCat]
Matching = numeric( I/2 )
Increment = 1:(I/2)
# unassigned = 0
Matching[ 1:halfCat ] = sample( Increment[ Category != i ] )[1:halfCat]
Matching
sample( Increment[ Category != i ] )[1:halfCat]
sample( Increment[ Category != i ] )
Increment
setwd("C:/Users/Kevin/Desktop/Wimber_et_al_replication/Analyses")
install.packages( 'lme4' )
